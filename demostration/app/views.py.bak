# Create your views here.


from django.shortcuts import render, HttpResponse
from requests.auth import HTTPBasicAuth
import requests
import json
from flatten_json import flatten

from django.http import HttpResponse, HttpResponseForbidden
from django.views.decorators.csrf import csrf_exempt

import hashlib
import hmac
import httplib
import json

from django.conf import settings

# Create your views here.

def index(request):
    return HttpResponse('Hello World!')

def test(request):
    return HttpResponse('My second view!')

#def profile(request):
#    req = requests.get('https://api.github.com/users/intellicoredev')
#    content = req.text
#    return HttpResponse(content)




def profile(request):
    parsedData = []
    if request.method == 'POST':
        username = request.POST.get('user')
        req = requests.get('https://api.github.com/users/' + username)
        jsonList = []
        jsonList.append(json.loads(req.content))
        userData = {}

        flat = flatten_json(jsonList)
        json_normalize(flat)
        for data in jsonList:
            userData['login'] = data['login']
            userData['name'] = data['name']
            userData['blog'] = data['blog']
            userData['email'] = data['email']
            userData['public_gists'] = data['public_gists']
            userData['public_repos'] = data['public_repos']
            userData['avatar_url'] = data['avatar_url']
            userData['followers'] = data['followers']
            userData['following'] = data['following']
        parsedData.append(userData)
    return render(request, 'app/profile.html', {'data': parsedData})

def devices(request):
    parsedData = []
    parsed_rinfoData = []


    user = "5ae21bf09058c2642494fb60"
    password = "0a84892f1600d66de7c45bc2f6a9fae3"
    #deviceId = "42A5B8"

    #url = 'https://backend.sigfox.com/api/devices/' + deviceId + '/messages'


    if request.method == 'POST':
        device_id = request.POST.get('device_id')
        url = 'https://backend.sigfox.com/api/devices/' + device_id + '/messages'

        req = requests.get(url,auth=HTTPBasicAuth(user, password))


        jsonList = []
        jsonList.append(json.loads(req.content))
        userData = {}

        for data in jsonList:
            userData = {}
            for record in data['data']:
                userData['device'] = record['device']
                userData['time'] = record['time']
                userData['data'] = record['data']
                userData['seqNumber'] = record['seqNumber']
                userData['nbFrames'] = record['nbFrames']
                userData['operator'] = record['operator']
                userData['country'] = record['country']
                userData['snr'] = record['snr']
                userData['linkQuality'] = record['linkQuality']
                userData['groupId'] = record['groupId']
                userData['rinfos'] = record['rinfos']
                #userData = record
                parsedData.append(userData)
                parsed_rinfoData = {}
    return render(request, 'app/devices.html', {'data': parsedData,'rinfos':parsed_rinfoData})


def sigfox(request):
    return HttpResponse('Hello sigfox!')



@csrf_exempt
def hello(request):
    return HttpResponse('pong sigfox')




def handle_webhook(event, payload):
    """Simple webhook handler that prints the event and payload to the console"""
    print('Received the {} event'.format(event))
    print(json.dumps(payload, indent=4))


@csrf_exempt
def handle_github_hook(request):
    # Check the X-Hub-Signature header to make sure this is a valid request.
    github_signature = request.META['HTTP_X_HUB_SIGNATURE']
    signature = hmac.new(settings.GITHUB_WEBHOOK_SECRET, request.body, hashlib.sha1)
    expected_signature = 'sha1=' + signature.hexdigest()
    if not hmac.compare_digest(github_signature, expected_signature):
        return HttpResponseForbidden('Invalid signature header')

    # Sometimes the payload comes in as the request body, sometimes it comes in
    # as a POST parameter. This will handle either case.
    if 'payload' in request.POST:
        payload = json.loads(request.POST['payload'])
    else:
        payload = json.loads(request.body)

    event = request.META['HTTP_X_GITHUB_EVENT']

    # This is where you'll do something with the webhook
    handle_webhook(event, payload)

    return HttpResponse('Webhook received', status=httplib.ACCEPTED)